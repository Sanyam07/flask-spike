"""
The GraphLab Create diversity toolkit is used to select a diverse subset of
items from an SFrame or SGraph.

Every diverse sampling method uses a measure of intrinsic item quality as well
as a measure of similarity between items. The quality of an item is usually a
single real-valued feature, while the similarity function takes two sets of
features and computes some distance between the feature vectors. Using these two
measures, the diverse sampler returns a high-quality and diverse (i.e. low
similarity between items in the set).

A :py:class:`~graphlab.diversity.diverse_sampler` instance can either take an
SFrame with a defined quality feature and a defined set of similarity features,
or an SGraph where the item similarities are defined along edges and the item
qualities are stored on vertices. After creating a diverse sampler, you can
choose to greedily stochasticly sample a diverse set. The greedy method will
select the optimal subset, while the stochastic version will return different
but diverse sets every time.

.. sourcecode:: python 
    >>> ground_set = graphlab.SFrame({'id': [0, 1, 2],
    ...                               'feature_1': [3, 1, 2],
    ...                               'feature_2': [[0, 1], [0, 1], [1, 0]]})
    >>> sampler = graphlab.diversity.diverse_sampler.create(data=ground_set,
    ...                                                     item_id='id',
    ...                                                     quality_feature='feature_1',
    ...                                                     similarity_features=['feature_2'])
    >>> sampler.sample(k=2)
    +-----------+------------+----+
    | feature_1 | feature_2  | id |
    +-----------+------------+----+
    |     2     | [0.0, 1.0] | 1  |
    |     1     | [1.0, 0.0] | 2  |
    +-----------+------------+----+

    >>> sampler.sample(k=2, greedy=True)
    +-----------+------------+----+
    | feature_1 | feature_2  | id |
    +-----------+------------+----+
    |     3     | [0.0, 1.0] | 0  |
    |     1     | [1.0, 0.0] | 2  |
    +-----------+------------+----+
"""

import graphlab as _gl
import diverse_sampler


# TODO: add ability to threshold by similarity as well
def create_similarity_graph(data,
                            item_id,
                            quality_feature,
                            similarity_features,
                            num_neighbors,
                            distance="cosine"):
  """
  Convenience function for creating a similarity graph that can be consumed by
  the diverse sampler.

  A diverse_sampler can be created with an SGraph or SFrame. If you initialize
  it with an SFrame, then a (reduced) similarity graph is created on-the-fly
  during sampling. This graph cannot be cached, because we usually do not create
  the full graph, but only compute similarities when needed. In some cases (such
  as generating many samples from the same ground set), it may be faster to pre-
  generate a similarity graph and create a sampler using this graph. In
  addition, creating a custom similarity graph enables more fine-grained control
  over the similarity function. With this function, it is possible to either set
  the number of neighbors to consider or only include neighbors that exceed some
  similarity threshold.

  In other cases, it may be more expensive to construct a full similarity graph,
  e.g. you want to only get one sample from large dataset. In cases like these,
  you may want to use an SFrame directly.

  Parameters
  ----------
  TODO

  Returns
  -------
  out: SGraph representing the full similarity graph, with item_id and
    quality_feature on each of the vertices, and a "similarity" field on the
    edges representing the similarity between two nodes.

  Examples
  --------
  >>> sf = graphlab.SFrame.read_csv('https://s3.amazonaws.com/dato-datasets/auto-mpg/auto-mpg.csv')
  >>> sg = graphlab.diversity.create_similarity_graph(data=sf, 
                                                      item_id='name',
                                                      quality_feature='accel',
                                                      similarity_features=['mpg', 'displ', 'hp', 'weight'],
                                                      num_neighbors=10)
  >>> sampler = graphlab.diversity.diverse_sampler.create(data=sg, 
                                                          item_id='name', 
                                                          quality_feature='accel', 
                                                          similarity_features=['similarity'])
  >>> sampler.sample(k=5)
  +------+-------+-------------------------------+
  | __id | accel |              name             |
  +------+-------+-------------------------------+
  |  61  |  12.0 |        chevrolet impala       |
  | 381  |  17.0 | oldsmobile cutlass ciera (... |
  | 198  |  21.0 |       ford granada ghia       |
  | 279  |  18.2 |        mercury zephyr 6       |
  | 364  |  18.0 |   chevrolet cavalier 2-door   |
  +------+-------+-------------------------------+

  """
  if num_neighbors is None:
    raise ValueError("num_neighbors must be specified.")

  model = _gl.nearest_neighbors.create(data, features=similarity_features, distance=distance)
  result = model.query(data, k=num_neighbors+1)

  # Nearest neighbors returns a point as its own neighbor, so remove these
  # from the graph
  result = result[result['rank'] > 1]

  # NN also returns a distance between points, but we actually want similarity
  result['distance'] = 1-result['distance']
  result.rename({'distance':'similarity'})

  g = _gl.SGraph().add_edges(result, 'query_label', 'reference_label')

  # Make sure we tag each vertex with its quality feature
  g.vertices[quality_feature] = [data[quality_feature][i] for i in g.vertices['__id']] 
  g.vertices[item_id] = [data[item_id][i] for i in g.vertices['__id']] 

  return g

def eval(data,
         quality_feature=None,
         similarity_features=None,
         eval_methods=None):
  """
  Objectively evaluate the quality and diversity of a data subset.

  There are several quantitaive measures of the quality and diversity of some
  set. This method provides three:
    - Average quality: The average over the quality features of each of the
      items in data.
    - Average similarity: The average of the pairwise similarities between every
      item in data.
    - Log-determinant: This simultaneously measures both the quality and
      diversity of a set. To measure the log-determinant of a given set, we
      first form the similarity matrix L, where a diagonal entry L_ii
      corresponds to the quality of item i, and an off diagonal entry L_ij
      corresponds to the similarity between items i and j. We then take the log
      of the determinant of this matrix. This type of matrix is also referred to
      as a Gramian matrix.

      The determinant of a Gramian matrix corresponds to the volume spanned by
      the vectors used to construct the matrix. If an item has a large quality,
      it corresponds to a longer vector, which will increase the volume (and
      determinant) of L. If two feature vectors are similar, then the volume
      decreases (because the vectors point in a similar direction), which
      correspondingly decreases the determinant. Thus, both quality and
      similarity are encapsulated by the log-determinant.

  Parameters
  ----------
  data: SFrame or SGraph
    The subset of data to evaluate.

  quality_feature: string, optional
    The quality feature to use for evaluation. If it is None, then neither the
    average quality nor the log-determinant will be measured.

  similarity_features: list[string], optional
    The set of similarity features to use for evaluation. If it is None, then
    neither the average similarity nor the log-determinant will be measured.

  eval_methods: list[string], {'average_similarity', 'average_quality', 'log_det'}
    The set of methods to measure. If eval_methods is None, then all possible
    evaluation methods will be used.

  Returns
  -------
  out: dict
    Dictionary of values with keys corresponding to measurement types and values
    corresponding to the actual evaluation scores.

  Examples
  --------
  TODO
  """
  raise ValueError("the eval() method is not ready for testing.")

  eval_frame = False
  if isinstance(data, _gl.SFrame):
    eval_frame = True
  elif not isinstance(data, _gl.SGraph):
    raise ValueError("Unknown data type " + str(type(data)) + ".")

  div_eval = _gl.extensions.diversity_eval()

  options = dict()
  if eval_methods is not None:
    options["eval_methods"] = eval_methods
  if quality_feature is not None:
    options["quality_feature"] = quality_feature

  if indices is not None:
    if eval_frame:
      return div_eval.evaluate_frame_idx(data, indices, options)
    else:
      return div_eval.evaluate_graph_idx(data, indices, options)
  else:
    if eval_frame:
      return div_eval.evaluate_frame(data, options)
    else:
      return div_eval.evaluate_graph(data, options)
